{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"draw",
				"drawPlayer"
			],
			[
				"dirt",
				"dirtTexture"
			],
			[
				"tile",
				"tile_size"
			],
			[
				"started",
				"IsStarted"
			],
			[
				"Get",
				"GetTicks"
			],
			[
				"start",
				"startTicks"
			],
			[
				"paused",
				"pausedTicks"
			],
			[
				"screen",
				"screen_flags"
			]
		]
	},
	"buffers":
	[
		{
			"file": "amberfell.go",
			"settings":
			{
				"buffer_size": 11972,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 58 files for \".Set\" (whole word)\n\n/home/iand/wip/amberfell/fonts.go:\n   52  		for x := 0; x < advance; x++ {\n   53  			for y := 0; y < font.height; y++ {\n   54: 				rgba.Set(x, y, fontSurface.At(x, font.height-y))\n   55  			}\n   56  		}\n\n/home/iand/wip/amberfell/shapes.go:\n  186  	for x := 0; x < unit; x++ {\n  187  		for y := 0; y < unit; y++ {\n  188: 			hatFront.Set(x, y, img.At(x, y))\n  189  		}\n  190  	}\n  ...\n  220  	for x := r.Min.X; x < r.Max.X+1; x++ {\n  221  		for y := r.Min.Y; y < r.Max.Y+1; y++ {\n  222: 			rgba.Set(x-r.Min.X, y-r.Min.Y, img.At(x, y))\n  223  		}\n  224  	}\n  ...\n  255  	for x := 0; x < rect.Max.X; x++ {\n  256  		for y := 0; y < rect.Max.Y; y++ {\n  257: 			rgba.Set(x, y, img.At(x, y))\n  258  		}\n  259  	}\n\n/home/iand/wip/amberfell/world.go:\n  254  			if hasAmberfell && amberfellCoords[0] == x && amberfellCoords[1] == z {\n  255  				for y := uint16(0); y < upper; y++ {\n  256: 					chunk.Set(x, y, z, BLOCK_AMBERFELL_SOURCE)\n  257  				}\n  258  			} else {\n  259  				for y := uint16(0); y < upper; y++ {\n  260  					if y >= rocks && y <= soil {\n  261: 						chunk.Set(x, y, z, BLOCK_DIRT)\n  262  					} else {\n  263: 						chunk.Set(x, y, z, BLOCK_STONE)\n  264  					}\n  265  \n  ...\n  270  				}\n  271  				for y := surface; y > surface-coal && y > 0; y-- {\n  272: 					chunk.Set(x, y, z, BLOCK_COAL_SEAM)\n  273  				}\n  274  				if coal > 0 {\n  ...\n  281  				}\n  282  				for y := surface; y > surface-iron && y > 0; y-- {\n  283: 					chunk.Set(x, y, z, BLOCK_IRON_SEAM)\n  284  				}\n  285  				if iron > 0 {\n  ...\n  292  				}\n  293  				for y := surface; y > surface-copper && y > 0; y-- {\n  294: 					chunk.Set(x, y, z, BLOCK_COPPER_SEAM)\n  295  				}\n  296  				if copper > 0 {\n  ...\n  344  					// Place a standing stone\n  345  					chunk.standingStoneProb = 0\n  346: 					chunk.Set(x-xw, y, z-zw, BLOCK_STONE)\n  347: 					chunk.Set(x-xw, y+1, z-zw, BLOCK_STONE)\n  348: 					chunk.Set(x-xw, y+2, z-zw, BLOCK_CARVED_STONE)\n  349  				}\n  350  \n  ...\n  356  					}\n  357  				} else if self.Precipitation(x, z) > BUSH_PRECIPITATION_MIN && rand.Intn(100) < BUSH_DENSITY_PCT {\n  358: 					self.Set(x, y, z, BLOCK_BUSH)\n  359  				} else {\n  360  					// feature1 := self.Feature1(x, z)\n  ...\n  362  \n  363  					// if feature1 > 0.8 && feature2 > 0.8 {\n  364: 					// 	self.Set(x, y, z, BLOCK_LEAVES)\n  365: 					// 	self.Set(x, y+1, z, BLOCK_LEAVES)\n  366: 					// 	self.Set(x, y+2, z, BLOCK_LEAVES)\n  367: 					// 	self.Set(x, y+3, z, BLOCK_LEAVES)\n  368: 					// 	self.Set(x, y+4, z, BLOCK_LEAVES)\n  369: 					// 	self.Set(x, y+5, z, BLOCK_LEAVES)\n  370: 					// 	self.Set(x, y+6, z, BLOCK_LEAVES)\n  371  					// } else if feature1 > 0.7 && feature2 > 0.7 {\n  372: 					// 	self.Set(x, y, z, BLOCK_LEAVES)\n  373: 					// 	self.Set(x, y+1, z, BLOCK_LEAVES)\n  374: 					// 	self.Set(x, y+2, z, BLOCK_LEAVES)\n  375: 					// 	self.Set(x, y+3, z, BLOCK_LEAVES)\n  376: 					// 	self.Set(x, y+4, z, BLOCK_LEAVES)\n  377  					// } else if feature1 > 0.6 && feature2 > 0.6 {\n  378: 					// 	self.Set(x, y, z, BLOCK_STONE)\n  379: 					// 	self.Set(x, y+1, z, BLOCK_LEAVES)\n  380: 					// 	self.Set(x, y+2, z, BLOCK_LEAVES)\n  381  					// }\n  382  				}\n  ...\n  472  func (self *World) Set(x uint16, y uint16, z uint16, b byte) {\n  473  	chunk, ox, oy, oz := self.GetChunkForBlock(x, y, z)\n  474: 	chunk.Set(ox, oy, oz, b)\n  475  }\n  476  \n  477  func (self *World) Setv(v Vectori, b byte) {\n  478  	chunk, ox, oy, oz := self.GetChunkForBlock(v[XAXIS], v[YAXIS], v[ZAXIS])\n  479: 	chunk.Set(ox, oy, oz, b)\n  480  }\n  481  \n  ...\n  511  func (self *World) Grow(x uint16, y uint16, z uint16, n int, s int, w int, e int, u int, d int, texture byte) {\n  512  	if y > 0 && x < MAP_DIAM && self.At(x+1, y-1, z) != 0 && rand.Intn(100) < e {\n  513: 		self.Set(x+1, y, z, texture)\n  514  		self.Grow(x+1, y, z, n, s, 0, e-2, u, d, texture)\n  515  	}\n  516  	if y > 0 && x > 0 && self.At(x-1, y-1, z) != 0 && rand.Intn(100) < w {\n  517: 		self.Set(x-1, y, z, texture)\n  518  		self.Grow(x-1, y, z, n, s, w-2, 0, u, d, texture)\n  519  	}\n  520  	if y > 0 && z < MAP_DIAM && self.At(x, y-1, z+1) != 0 && rand.Intn(100) < s {\n  521: 		self.Set(x, y, z+1, texture)\n  522  		self.Grow(x, y, z+1, 0, s-2, w, e, u, d, texture)\n  523  	}\n  524  	if y > 0 && z > 0 && self.At(x, y-1, z-1) != 0 && rand.Intn(100) < n {\n  525: 		self.Set(x, y, z-1, texture)\n  526  		self.Grow(x, y, z-1, n-2, 0, w, e, u, d, texture)\n  527  	}\n  528  	if y < MAP_DIAM && rand.Intn(100) < u {\n  529: 		self.Set(x, y+1, z, texture)\n  530  		self.Grow(x, y+1, z, n, s, w, e, u-2, 0, texture)\n  531  	}\n  532  	if y > 0 && rand.Intn(100) < d {\n  533: 		self.Set(x, y-1, z, texture)\n  534  		self.Grow(x, y-1, z, n, s, w, e, 0, d-2, texture)\n  535  	}\n  ...\n  733  \n  734  func (self *World) GrowTree(x uint16, y uint16, z uint16) {\n  735: 	self.Set(x, y, z, BLOCK_TRUNK)\n  736: 	self.Set(x, y+1, z, BLOCK_TRUNK)\n  737: 	self.Set(x, y+2, z, BLOCK_TRUNK)\n  738: 	self.Set(x, y+3, z, BLOCK_TRUNK)\n  739: 	self.Set(x+1, y+3, z, BLOCK_LEAVES)\n  740: 	self.Set(x-1, y+3, z, BLOCK_LEAVES)\n  741: 	self.Set(x, y+3, z+1, BLOCK_LEAVES)\n  742: 	self.Set(x, y+3, z-1, BLOCK_LEAVES)\n  743  \n  744  	self.GrowBranch(x, y+3, z, NORTH_FACE, 50)\n  ...\n  748  \n  749  	if rand.Intn(100) < 50 {\n  750: 		self.Set(x, y+4, z, BLOCK_TRUNK)\n  751: 		self.Set(x, y+5, z, BLOCK_TRUNK)\n  752  		self.GrowBranch(x, y+5, z, NORTH_FACE, 50)\n  753  		self.GrowBranch(x, y+5, z, EAST_FACE, 50)\n  ...\n  757  \n  758  	if rand.Intn(100) < 30 {\n  759: 		self.Set(x, y+6, z, BLOCK_TRUNK)\n  760: 		self.Set(x, y+7, z, BLOCK_TRUNK)\n  761  		self.GrowBranch(x, y+7, z, NORTH_FACE, 50)\n  762  		self.GrowBranch(x, y+7, z, EAST_FACE, 50)\n  ...\n  782  	}\n  783  	if rand.Intn(100) < chance {\n  784: 		self.Set(newx, newy, newz, BLOCK_TRUNK)\n  785  		if face != SOUTH_FACE {\n  786  			if rand.Intn(100) < 50 {\n  787  				self.GrowBranch(newx, newy, newz, NORTH_FACE, chance/3)\n  788  			} else {\n  789: 				self.Set(newx, newy, newz-1, BLOCK_LEAVES)\n  790  			}\n  791  		}\n  ...\n  795  				self.GrowBranch(newx, newy, newz, SOUTH_FACE, chance/3)\n  796  			} else {\n  797: 				self.Set(newx, newy, newz+1, BLOCK_LEAVES)\n  798  			}\n  799  		}\n  ...\n  803  				self.GrowBranch(newx, newy, newz, WEST_FACE, chance/3)\n  804  			} else {\n  805: 				self.Set(newx-1, newy, newz, BLOCK_LEAVES)\n  806  			}\n  807  		}\n  ...\n  811  				self.GrowBranch(newx, newy, newz, EAST_FACE, chance/3)\n  812  			} else {\n  813: 				self.Set(newx+1, newy, newz, BLOCK_LEAVES)\n  814  			}\n  815  		}\n  ...\n  819  				self.GrowBranch(newx, newy, newz, UP_FACE, chance/3)\n  820  			} else {\n  821: 				self.Set(newx, newy+1, newz, BLOCK_LEAVES)\n  822  			}\n  823  		}\n  ...\n  826  				self.GrowBranch(newx, newy, newz, DOWN_FACE, chance/3)\n  827  			} else {\n  828: 				self.Set(newx, newy-1, newz, BLOCK_LEAVES)\n  829  			}\n  830  		}\n  831  	} else {\n  832: 		self.Set(newx, newy, newz, BLOCK_LEAVES)\n  833  \n  834  	}\n\n57 matches across 3 files\n\n\nSearching 58 files for \"LoadModel\" (whole word)\n\n/home/iand/wip/amberfell/amberfell.go:\n  159  	gGuiBuffer = NewVertexBuffer(1000, terrainTexture)\n  160  \n  161: 	WolfModel = LoadModel(\"res/wolf.mm3d\")\n  162  \n  163  	TheWorld = NewWorld()\n\n/home/iand/wip/amberfell/functions.go:\n   34  }\n   35  \n   36: // Function LoadModel loads and returns an MM3D model.\n   37: func LoadModel(filename string) (model *mm3dmodel.Model) {\n   38  	fmt.Printf(\"Loading model: %s\\n\", filename)\n   39  	f, err := os.Open(filename)\n\n3 matches across 2 files\n\n\nSearching 79 files for \"GenerateChunkFeatures\"\n\n/home/iand/wip/amberfell/chunk.go:\n  150  	}\n  151  \n  152: 	TheWorld.GenerateChunkFeatures(&chunk)\n  153  \n  154  	console.chunkGenerationTime = time.Now().UnixNano() - startTicks\n  ...\n  193  func (self *Chunk) PreRender(selectedBlockFace *BlockFace) {\n  194  	if !self.featuresLoaded {\n  195: 		TheWorld.GenerateChunkFeatures(self)\n  196  	}\n  197  \n\n/home/iand/wip/amberfell/world.go:\n  188  }\n  189  \n  190: func (self *World) GenerateChunkFeatures(chunk *Chunk) {\n  191  	if !chunk.featuresLoaded {\n  192  		cx := chunk.x\n\n3 matches across 2 files\n\n\nSearching 80 files for \"GenerateChunkFeatures\" (case sensitive)\n\n/home/iand/wip/amberfell/chunk.go:\n  150  	}\n  151  \n  152: 	//TheWorld.GenerateChunkFeatures(&chunk)\n  153  \n  154  	console.chunkGenerationTime = time.Now().UnixNano() - startTicks\n  ...\n  191  func (self *Chunk) PreRender(selectedBlockFace *BlockFace) {\n  192  	if !self.featuresLoaded {\n  193: 		TheWorld.GenerateChunkFeatures(self)\n  194  	}\n  195  \n  ...\n  241  func RenderChunk(chunk *Chunk, adjacents [4]*Chunk, selectedBlockFace *BlockFace, vb chan *VertexBuffer ) {\n  242  	if !chunk.featuresLoaded {\n  243: 		TheWorld.GenerateChunkFeatures(chunk)\n  244  	}\n  245  \n\n/home/iand/wip/amberfell/world.go:\n  188  }\n  189  \n  190: func (self *World) GenerateChunkFeatures(chunk *Chunk) {\n  191  	if !chunk.featuresLoaded {\n  192  		cx := chunk.x\n\n4 matches across 2 files\n\n\nSearching 80 files for \"GenerateChunkFeatures\" (case sensitive)\n\n/home/iand/wip/amberfell/chunk.go:\n  150  	}\n  151  \n  152: 	//TheWorld.GenerateChunkFeatures(&chunk)\n  153  \n  154  	console.chunkGenerationTime = time.Now().UnixNano() - startTicks\n  ...\n  191  func (self *Chunk) PreRender(selectedBlockFace *BlockFace) {\n  192  	if !self.featuresLoaded {\n  193: 		TheWorld.GenerateChunkFeatures(self)\n  194  	}\n  195  \n  ...\n  241  func RenderChunk(chunk *Chunk, adjacents [4]*Chunk, selectedBlockFace *BlockFace, vb chan *VertexBuffer ) {\n  242  	if !chunk.featuresLoaded {\n  243: 		//TheWorld.GenerateChunkFeatures(chunk)\n  244  	}\n  245  \n\n/home/iand/wip/amberfell/world.go:\n  188  }\n  189  \n  190: func (self *World) GenerateChunkFeatures(chunk *Chunk) {\n  191  	if !chunk.featuresLoaded {\n  192  		cx := chunk.x\n\n4 matches across 2 files\n\n\nSearching 80 files for \"prerender\" (case sensitive)\n\n0 matches across 0 files\n\n\nSearching 80 files for \"PreRender\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n  422  \n  423  	for time.Now().UnixNano()-startTicks < maxtime*1e6 && r < rmax {\n  424: 		TheWorld.GetChunk(uint16(int(px)+x), uint16(int(pz)+z)).PreRender(nil)\n  425: 		TheWorld.GetChunk(uint16(int(px)-x), uint16(int(pz)-z)).PreRender(nil)\n  426  		if z == r {\n  427  			if x == r {\n\n/home/iand/wip/amberfell/chunk.go:\n  189  \n  190  \n  191: func (self *Chunk) PreRender(selectedBlockFace *BlockFace) {\n  192  	if !self.featuresLoaded {\n  193  		TheWorld.GenerateChunkFeatures(self)\n  ...\n  230  \n  231  func (self *Chunk) Render(selectedBlockFace *BlockFace) {\n  232: 	self.PreRender(selectedBlockFace)\n  233  \n  234  	self.vertexBuffer.RenderDirect(true)\n\n/home/iand/wip/amberfell/chunk_test.go:\n   22  }\n   23  \n   24: func BenchmarkChunkPreRender(b *testing.B) {\n   25  	b.StopTimer()\n   26  	TheWorld = NewWorld()\n   ..\n   29  	for i := 0; i < b.N; i++ {\n   30  		chunk.clean = false\n   31: 		chunk.PreRender(nil)\n   32  	}\n   33  }\n\n6 matches across 3 files\n\n\nSearching 80 files for \"HasVisibleFaces\"\n\n/home/iand/wip/amberfell/chunk.go:\n  210  						neighbours := TheWorld.Neighbours(pos)\n  211  \n  212: 						if TheWorld.HasVisibleFaces(neighbours) {\n  213  \n  214  							selectedFace := uint8(FACE_NONE)\n  ...\n  316  						}\n  317  \n  318: 						if TheWorld.HasVisibleFaces(neighbours) {\n  319  \n  320  							selectedFace := uint8(FACE_NONE)\n\n/home/iand/wip/amberfell/world.go:\n  415  }\n  416  \n  417: func (self *World) HasVisibleFaces(neighbours [18]BlockId) bool {\n  418  \n  419  	for i := 0; i < 6; i++ {\n\n3 matches across 2 files\n\n\nSearching 80 files for \"Neighbours(\"\n\n/home/iand/wip/amberfell/chunk.go:\n  206  \n  207  						pos := Vectori{self.x*CHUNK_WIDTH + x, y, self.z*CHUNK_WIDTH + z}\n  208: 						neighbours := TheWorld.Neighbours(pos)\n  209  \n  210  						if HasVisibleFaces(neighbours) {\n\n/home/iand/wip/amberfell/world.go:\n  431  }\n  432  \n  433: func (self *World) Neighbours(pos Vectori) (neighbours [18]BlockId) {\n  434  	x := pos[XAXIS]\n  435  	y := pos[YAXIS]\n  ...\n  446  }\n  447  \n  448: func (self *World) AllNeighbours(pos Vectori) (neighbours [18]BlockId) {\n  449  	x := pos[XAXIS]\n  450  	y := pos[YAXIS]\n  ...\n  508  	mobRect2 := Rect{x: float64(mp[XAXIS]) + dvx, y: float64(mp[ZAXIS]) + dvz, sizex: mob.W(), sizey: mob.D()}\n  509  \n  510: 	neighbours := self.AllNeighbours(ip)\n  511  \n  512  	if self.Atv(ip) != BLOCK_AIR {\n\n4 matches across 2 files\n\n\nSearching 79 files for \"sunlightLevel\" (case sensitive)\n\n/home/iand/wip/amberfell/amberfell.go:\n   32  \n   33  	timeOfDay     float32 = 9\n   34: 	sunlightLevel int     = 7\n   35  \n   36  	worldSeed = int64(20000)\n   ..\n  348  	gl.Materialfv(gl.FRONT, gl.SHININESS, []float32{0.0, 0.0, 0.0, 1})\n  349  \n  350: 	daylightIntensity := float32(SUNLIGHT_LEVELS[sunlightLevel])\n  351  \n  352  	gl.LightModelfv(gl.LIGHT_MODEL_AMBIENT, []float32{daylightIntensity / 2.5, daylightIntensity / 2.5, daylightIntensity / 2.5, 1})\n  ...\n  399  \n  400  	if timeOfDay >= 21.5 || timeOfDay < 4.5 {\n  401: 		sunlightLevel = 0\n  402  	} else if timeOfDay >= 4.5 && timeOfDay < 6 {\n  403: 		sunlightLevel = 1 + int(6*(timeOfDay-4.5)/1.5)\n  404  	} else if timeOfDay >= 6 && timeOfDay < 20 {\n  405: 		sunlightLevel = 7\n  406  	} else {\n  407: 		sunlightLevel = 7 - int(6*(timeOfDay-20)/1.5)\n  408  	}\n  409  \n\n/home/iand/wip/amberfell/mob.go:\n  212  		upperLightLevel := int(behaviour.sunlight & SUNLIGHT_LEVELS_UPPER_MASK)\n  213  \n  214: 		if sunlightLevel >= lowerLightLevel && sunlightLevel < upperLightLevel {\n  215  			weight := float64(behaviour.weight)\n  216  			if weight == 0 {\n\n8 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 13572,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "shapes.go",
			"settings":
			{
				"buffer_size": 71748,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/tmp/openttd/trunk/src/road_gui.cpp",
			"settings":
			{
				"buffer_size": 42793,
				"line_ending": "Unix"
			}
		},
		{
			"file": "items.go",
			"settings":
			{
				"buffer_size": 9412,
				"line_ending": "Unix"
			}
		},
		{
			"file": "chunk.go",
			"settings":
			{
				"buffer_size": 8464,
				"line_ending": "Unix"
			}
		},
		{
			"file": "chunk_test.go",
			"settings":
			{
				"buffer_size": 977,
				"line_ending": "Unix"
			}
		},
		{
			"file": "player.go",
			"settings":
			{
				"buffer_size": 22958,
				"line_ending": "Unix"
			}
		},
		{
			"file": "constants.go",
			"settings":
			{
				"buffer_size": 7962,
				"line_ending": "Unix"
			}
		},
		{
			"file": "viewport.go",
			"settings":
			{
				"buffer_size": 9959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "geometry.go",
			"settings":
			{
				"buffer_size": 13791,
				"line_ending": "Unix"
			}
		},
		{
			"file": "functions.go",
			"settings":
			{
				"buffer_size": 2411,
				"line_ending": "Unix"
			}
		},
		{
			"file": "picker.go",
			"settings":
			{
				"buffer_size": 4368,
				"line_ending": "Unix"
			}
		},
		{
			"file": "console.go",
			"settings":
			{
				"buffer_size": 3887,
				"line_ending": "Unix"
			}
		},
		{
			"file": "inventory.go",
			"settings":
			{
				"buffer_size": 24455,
				"line_ending": "Unix"
			}
		},
		{
			"file": "pause.go",
			"settings":
			{
				"buffer_size": 1538,
				"line_ending": "Unix"
			}
		},
		{
			"file": "fonts.go",
			"settings":
			{
				"buffer_size": 2968,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/productdb/trunk/makedump",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/iand/wip/gofirst/sdltest.go",
			"settings":
			{
				"buffer_size": 3655,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 583,
				"line_ending": "Unix"
			}
		},
		{
			"file": "wolf.go",
			"settings":
			{
				"buffer_size": 8670,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mob.go",
			"settings":
			{
				"buffer_size": 10661,
				"line_ending": "Unix"
			}
		},
		{
			"file": "world.go",
			"settings":
			{
				"buffer_size": 23424,
				"line_ending": "Unix"
			}
		},
		{
			"file": "world_test.go",
			"settings":
			{
				"buffer_size": 929,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 297.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 435.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/iand/tmp/spec.html",
		"/home/iand/wip/productdb/trunk/graphutils.py",
		"/home/iand/wip/productdb/trunk/upload",
		"/home/iand/wip/kasabi-recommend/queries.txt",
		"/home/iand/wip/kasabi-recommend/test.py",
		"/home/iand/wip/sparql-templates/sparqltemplate.php",
		"/home/iand/wip/sparql-templates/demo.php",
		"/home/iand/wip/kasabi-recommend/recommend.py",
		"/home/iand/wip/kasabi-georss/index.php",
		"/home/iand/wip/kasabi-georss/test.html",
		"/home/iand/wip/amberfell/functions_test.go",
		"/home/iand/wip/amberfell/recipes.go",
		"/home/iand/wip/amberfell/forge.go",
		"/home/iand/wip/amberfell/mob.go",
		"/home/iand/wip/amberfell/wolf.go",
		"/home/iand/wip/tmp/image.go",
		"/home/iand/wip/amberfell/carpentersbench.go",
		"/home/iand/wip/amberfell/steamgenerator.go",
		"/home/iand/wip/amberfell/campfire.go",
		"/home/iand/wip/amberfell/amberfellpump.go",
		"/home/iand/wip/amberfell/amberfellcondenser.go",
		"/home/iand/wip/amberfell/beesnest.go",
		"/home/iand/wip/amberfell/furnace.go",
		"/home/iand/wip/tmp/ticker.go",
		"/home/iand/wip/amberfell/amberfell.sublime-workspace",
		"/home/iand/wip/amberfell/CREDITS",
		"/home/iand/.cache/.fr-Bq9LWQ/opensteer/src/SimpleVehicle.cpp",
		"/home/iand/.cache/.fr-HhkxL1/opensteer/src/Vec3.cpp",
		"/home/iand/.cache/.fr-Tiai3N/opensteer/src/main.cpp",
		"/home/iand/.cache/.fr-XSjVuk/opensteer/src/OpenSteerDemo.cpp",
		"/home/iand/.cache/.fr-xMdhps/opensteer/plugins/CaptureTheFlag.cpp",
		"/home/iand/wip/amberfell/geometry_test.go",
		"/home/iand/tmp/openttd/trunk/src/genworld.cpp",
		"/home/iand/tmp/openttd/trunk/src/industry_cmd.cpp",
		"/home/iand/tmp/openttd/trunk/src/industry.h",
		"/home/iand/tmp/openttd/trunk/src/map_func.h",
		"/home/iand/tmp/openttd/trunk/src/industrytype.h",
		"/home/iand/gocode/src/github.com/iand/perlin/perlin.go",
		"/home/iand/.config/sublime-text-2/Packages/GoSublime/CHANGELOG.md",
		"/home/iand/wip/amberfell/world.go",
		"/home/iand/wip/perlin/perlin.go",
		"/home/iand/wip/amberfell/window.go",
		"/home/iand/wip/amberfell/gameloop.go",
		"/home/iand/web/talisians.com/www/conf/venus.ini",
		"/usr/local/go/src/pkg/github.com/kierdavis/go/mm3dmodel/mm3dmodel.go",
		"/home/iand/wip/amberfell/res/player-texture-guide.txt",
		"/home/iand/wip/amberfell/amberfell.go",
		"/home/iand/wip/amberfell/constants.go",
		"/home/iand/wip/amberfell/functions.go",
		"/home/iand/wip/mc-ogl-shaders/render_experiments/main.py",
		"/home/iand/wip/mc-ogl-shaders/render_experiments/volume.py",
		"/home/iand/wip/mc-ogl-shaders/render_experiments/ext/ext.c",
		"/home/iand/wip/mc-ogl-shaders/render_experiments/occlusion.py",
		"/home/iand/wip/mc-ogl-shaders/render_experiments/util.py",
		"/home/iand/wip/amberfell/shapes.go",
		"/home/iand/wip/amberfell/geometry.go",
		"/home/iand/wip/amberfell/timer.go",
		"/home/iand/wip/amberfell/viewport.go",
		"/home/iand/wip/amberfell/fonts.go",
		"/home/iand/wip/amberfell/player.go",
		"/home/iand/wip/amberfell/scene.go",
		"/home/iand/wip/amberfell/vector_test.go",
		"/home/iand/wip/amberfell/vector.go",
		"/home/iand/.config/sublime-text-2/Packages/GoSublime/GoSublime.sublime-settings",
		"/home/iand/.config/sublime-text-2/Packages/GoSublime/Default (Linux).sublime-keymap",
		"/home/iand/wip/amberfell/globals.go",
		"/home/iand/wip/amberfell/	vector_test.go",
		"/home/iand/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/iand/.config/sublime-text-2/Packages/User/GoSublime.sublime-settings",
		"/home/iand/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/home/iand/wip/amberfell/amberfell.sublime-project",
		"/home/iand/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/iand/wip/amberfell/af/constants.go",
		"/home/iand/wip/amberfell/af/functions.go",
		"/home/iand/wip/amberfell/af/gameloop.go",
		"/home/iand/wip/amberfell/af/globals.go",
		"/home/iand/wip/amberfell/af/mob.go",
		"/home/iand/wip/amberfell/af/player.go",
		"/home/iand/wip/amberfell/af/shapes.go",
		"/home/iand/wip/amberfell/af/vector.go",
		"/home/iand/wip/amberfell/af/vector_test.go",
		"/home/iand/wip/amberfell/af/window.go",
		"/home/iand/wip/amberfell/af/wolf.go",
		"/home/iand/wip/amberfell/af/world.go",
		"/home/iand/wip/amberfell/af/timer.go",
		"/home/iand/wip/amberfell/README.md",
		"/home/iand/wip/amberfell/af/blocks.go",
		"/home/iand/.config/sublime-text-2/Packages/User/Go.sublime-settings",
		"/home/iand/Documents/minecraft-server/plugins.txt",
		"/home/iand/Dropbox/documents/minecraft-server/plugins.txt",
		"/home/iand/wip/gofirst/sdltest.go",
		"/home/iand/wip/gofirst/test.go",
		"/home/iand/wip/gofirst/gltest.go",
		"/home/iand/wip/gofirst/draw.go",
		"/home/iand/wip/gofirst/glcube.go",
		"/home/iand/gocode/src/amberfell/amberfell.go",
		"/home/iand/gocode/src/amberfell/README.md",
		"/home/iand/gocode/src/amberfell/af/mob.go",
		"/home/iand/gocode/src/amberfell/af/scene.go",
		"/home/iand/gocode/src/amberfell/af/world.go",
		"/home/iand/gocode/src/github.com/iand/amberfell/amberfell.go",
		"/home/iand/gocode/src/amberfell/af/player.go",
		"/home/iand/.cache/.fr-tMTa0R/Zen of Networked Physics/Source/Cube.h",
		"/home/iand/gocode/src/amberfell/af/vector.go",
		"/home/iand/gocode/src/amberfell/af/timer.go",
		"/home/iand/gocode/src/amberfell/af/constants.go",
		"/home/iand/.config/sublime-text-2/Packages/Default/Default (Linux).sublime-keymap",
		"/home/iand/gocode/src/amberfell/world.go",
		"/home/iand/bin/go/src/pkg/code.google.com/p/graphics-go/graphics/rotate.go",
		"/home/iand/bin/go/src/pkg/code.google.com/p/graphics-go/graphics/affine.go",
		"/home/iand/wip/gofirst/graphicstest.go",
		"/home/iand/wip/gofirst/gomandel.go",
		"/home/iand/.profile",
		"/home/iand/wip/go/hello.go",
		"/home/iand/bin/minecraft/start",
		"/home/iand/fixgnome.sh",
		"/home/iand/wip/mandel/mandel.go",
		"/home/iand/wip/forms/index.php",
		"/home/iand/wip/mdjson/form.html",
		"/home/iand/wip/myron/myron",
		"/home/iand/wip/cohodo/index.html",
		"/home/iand/wip/factpump/hello.py",
		"/home/iand/wip/sameas/sameas.php",
		"/home/iand/wip/widgets/tablemaker.php",
		"/home/iand/Documents/blogging/ia-20120316.txt",
		"/home/iand/wip/playn-samples/README.md",
		"/home/iand/web/iandavis.com/wiki/htdocs/genealogy/wiki.d/Main.1876BirthOfLouisaEmmings",
		"/home/iand/web/iandavis.com/wiki/htdocs/genealogy/wiki.d/Main.RG13-1359-26-20"
	],
	"find":
	{
		"height": 66.0
	},
	"find_in_files":
	{
		"height": 88.0,
		"where_history":
		[
			"-amberfell",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"sunlightLevel",
			"gl.",
			"chunkself",
			"chunk",
			"Neighbours(",
			"Cuboid",
			"HasVisibleFaces",
			"visible",
			"featuresLoaded",
			"PreRender",
			"prerender",
			"GenerateChunkFeatures",
			"ChunkLoadedFor",
			"self",
			"pos",
			"neigh",
			"GenerateAmberfell",
			"GenerateChunkFeatures",
			"neig",
			"neigh",
			"playerRect",
			"AllNeighbours",
			"neigh",
			"Draw(",
			"cuboid2",
			"face",
			"ORIENTED_CUBE",
			"false,\\n",
			"block.texture",
			"blocktype",
			"items[uint16(blockid)]",
			"blenc",
			"block",
			"Cuboid2",
			"orient",
			"atv",
			"NewItem",
			"NewBlock",
			"chunkCoordsFromWorld",
			"GetChunkForBlock",
			"index",
			"GetChunkForBlock",
			"chunkcoords",
			"getc",
			"NewChunk",
			"self",
			"generate",
			", TEXTURE_NONE, STRENGTH_WOOD, false, true, false, nil",
			"furnace",
			"productUnit",
			"times",
			"tree",
			"camp",
			"zinc",
			"ZINC",
			"furnac",
			"iron",
			"GetMouseState",
			"RepeatBreakBlock",
			"transp",
			"hasvisi",
			"HasVisibleFaces",
			"trans",
			"trans[",
			"rotate",
			"Draw",
			"block_",
			"1",
			"coal",
			"selectedBlockFace",
			"groundl",
			"Draw",
			"Draw(",
			"wander",
			"LoadModel",
			"loadmodel",
			".Set",
			"1",
			"walkSequence",
			"applyfo",
			"applyf",
			"framesDrawn",
			"interactingBlock",
			"Spawn",
			"ground",
			"groundl",
			"self.mob",
			"UpdateTimeOfDay",
			"timeofD",
			"angle >= -float64(behaviour.targetAngle) && angle <= float64(behaviour.targetAngle)",
			"walkSequence",
			"walk",
			"Bounce",
			"mob",
			"Act",
			"craftingProductSlots",
			"productRects",
			"productSlots",
			"craftingPro",
			"productSlots",
			"componentSlots",
			"componentRects",
			"len(self.componentRects)",
			"slotsep",
			"diam",
			"offset",
			"float32",
			"buffer",
			"drawpl",
			"inventory[",
			"hittest",
			"ThePlayer.inventory",
			"hasre",
			"HandleMouse",
			"blocksize",
			"selection",
			"inventory.",
			"Terrain",
			"Neighb",
			"updatecamp",
			"SelectAction",
			"currentAction",
			"blockIndex",
			"timedObjects",
			"campfires",
			"Update(",
			"TimedObject",
			"Update"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"self",
			"chunkself",
			"chunk",
			"mobRect2",
			"SHAPE_ORIENTED_CUBE",
			"blocktype.texture",
			"blocktype",
			"NewItemType",
			"NewBlockType",
			"",
			"(angle >= 360-float64(behaviour.targetAngle) || angle <= float64(behaviour.targetAngle))",
			"craftingProductRects",
			"craftingProductSlots",
			"craftingComponentSlots",
			"craftingComponentRects",
			"slotsInRow",
			"slotstep",
			"timesObjects",
			"selectedFace == DOWN_FACE, shadeLevels[DOWN_FACE], ",
			"selectedFace == UP_FACE, shadeLevels[UP_FACE], ",
			"selectedFace == SOUTH_FACE, shadeLevels[SOUTH_FACE], ",
			"selectedFace == NORTH_FACE, shadeLevels[NORTH_FACE], ",
			"selectedFace == WEST_FACE, shadeLevels[WEST_FACE], ",
			"selectedFace == EAST_FACE, shadeLevels[EAST_FACE], ",
			"visible [6]bool, shadeLevels [6]int, selectedFace",
			"visible, shadeLevels, selectedFace",
			"block.texture2",
			"block.texture1",
			"",
			"i",
			"update2000ms",
			"vertices",
			"j",
			"self",
			"NOISE_SCALE",
			"MAP_DIAM",
			"Item",
			"console",
			"self",
			"AddFace",
			"SlabCross(vertexBuffer, x, y, z, ORIENT_EAST",
			", x float32, y float32, z float32, orient",
			"NORMALS[DOWN_FACE]",
			"NORMALS[UP_FACE]",
			"NORMALS[SOUTH_FACE]",
			"NORMALS[NORTH_FACE]",
			"NORMALS[WEST_FACE]",
			"NORMALS[EAST_FACE]",
			"vertexBuffer.vertices",
			"vertexBuffer.indices",
			"vertexBuffer",
			"v",
			"vertexData",
			"[2]float32{block.texpos[",
			"",
			", ",
			"block.TexPos(",
			"",
			"p3",
			"p4",
			"p2",
			"p1",
			"LEAVES",
			"textures",
			"//gl.Color4ub(96, 208, 96, 255)",
			"",
			"ch",
			"96, 208, 96, 255",
			"96, 208, 96, 64",
			"64, 192, 64, 255",
			"64, 192, 64, 64",
			"self",
			"%18.13f",
			", ",
			"i",
			"j",
			"Vectori",
			"case BLOCK_DIRT:",
			"case BLOCK_STONE:",
			"",
			"af.ThePlayer",
			"af.World",
			"af.world",
			"MapTextures",
			"width",
			"scale",
			"",
			"w.",
			"w *Wolf",
			"",
			"math.Abs",
			"float64",
			"DebugMode",
			"mob",
			"world.Blocks",
			"world.D",
			"world.H",
			"world.W",
			"GroundLevel",
			"af.GroundLevel",
			"GroundLevel",
			"blockSize/2",
			"blockSize",
			"0.75",
			"",
			"-10",
			"  "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "amberfell.go",
					"settings":
					{
						"buffer_size": 11972,
						"regions":
						{
						},
						"selection":
						[
							[
								678,
								697
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 286.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"settings":
					{
						"buffer_size": 13572,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										179,
										183
									],
									[
										375,
										379
									],
									[
										536,
										540
									],
									[
										703,
										707
									],
									[
										932,
										936
									],
									[
										1109,
										1113
									],
									[
										1174,
										1178
									],
									[
										1321,
										1325
									],
									[
										1488,
										1492
									],
									[
										1657,
										1661
									],
									[
										1831,
										1835
									],
									[
										1881,
										1885
									],
									[
										1933,
										1937
									],
									[
										2142,
										2146
									],
									[
										2322,
										2326
									],
									[
										2370,
										2374
									],
									[
										2420,
										2424
									],
									[
										2470,
										2474
									],
									[
										2520,
										2524
									],
									[
										2570,
										2574
									],
									[
										2620,
										2624
									],
									[
										2730,
										2734
									],
									[
										2778,
										2782
									],
									[
										2828,
										2832
									],
									[
										2878,
										2882
									],
									[
										2928,
										2932
									],
									[
										3038,
										3042
									],
									[
										3085,
										3089
									],
									[
										3135,
										3139
									],
									[
										3344,
										3348
									],
									[
										3527,
										3531
									],
									[
										3788,
										3792
									],
									[
										3974,
										3978
									],
									[
										4167,
										4171
									],
									[
										4353,
										4357
									],
									[
										4508,
										4512
									],
									[
										4656,
										4660
									],
									[
										4843,
										4847
									],
									[
										4882,
										4886
									],
									[
										4923,
										4927
									],
									[
										4964,
										4968
									],
									[
										5005,
										5009
									],
									[
										5049,
										5053
									],
									[
										5093,
										5097
									],
									[
										5137,
										5141
									],
									[
										5288,
										5292
									],
									[
										5330,
										5334
									],
									[
										5522,
										5526
									],
									[
										5564,
										5568
									],
									[
										5762,
										5766
									],
									[
										5967,
										5971
									],
									[
										6136,
										6140
									],
									[
										6304,
										6308
									],
									[
										6472,
										6476
									],
									[
										6638,
										6642
									],
									[
										6806,
										6810
									],
									[
										6898,
										6902
									],
									[
										7157,
										7166
									],
									[
										7298,
										7307
									],
									[
										7353,
										7362
									],
									[
										7641,
										7662
									],
									[
										7878,
										7899
									],
									[
										8003,
										8024
									],
									[
										8264,
										8285
									],
									[
										8501,
										8522
									],
									[
										8721,
										8742
									],
									[
										8847,
										8868
									],
									[
										9108,
										9129
									],
									[
										9345,
										9366
									],
									[
										9567,
										9588
									],
									[
										9693,
										9714
									],
									[
										10135,
										10144
									],
									[
										10215,
										10224
									],
									[
										10351,
										10360
									],
									[
										10565,
										10574
									],
									[
										10731,
										10740
									],
									[
										10894,
										10903
									],
									[
										11118,
										11133
									],
									[
										11257,
										11272
									],
									[
										11421,
										11436
									],
									[
										11733,
										11744
									],
									[
										11882,
										11893
									],
									[
										12033,
										12044
									],
									[
										12291,
										12302
									],
									[
										12527,
										12540
									],
									[
										12736,
										12749
									],
									[
										12970,
										12983
									],
									[
										13051,
										13064
									],
									[
										13160,
										13173
									],
									[
										13204,
										13217
									],
									[
										13403,
										13416
									],
									[
										13439,
										13452
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								13151,
								13157
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 10,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 6000.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "shapes.go",
					"settings":
					{
						"buffer_size": 71748,
						"regions":
						{
						},
						"selection":
						[
							[
								25114,
								25114
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8775.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/iand/tmp/openttd/trunk/src/road_gui.cpp",
					"settings":
					{
						"buffer_size": 42793,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "items.go",
					"settings":
					{
						"buffer_size": 9412,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "chunk.go",
					"settings":
					{
						"buffer_size": 8464,
						"regions":
						{
						},
						"selection":
						[
							[
								3805,
								3811
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2229.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "chunk_test.go",
					"settings":
					{
						"buffer_size": 977,
						"regions":
						{
						},
						"selection":
						[
							[
								584,
								868
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "player.go",
					"settings":
					{
						"buffer_size": 22958,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 718.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "constants.go",
					"settings":
					{
						"buffer_size": 7962,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4438.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "viewport.go",
					"settings":
					{
						"buffer_size": 9959,
						"regions":
						{
						},
						"selection":
						[
							[
								6004,
								6004
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2707.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "geometry.go",
					"settings":
					{
						"buffer_size": 13791,
						"regions":
						{
						},
						"selection":
						[
							[
								3638,
								3638
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1836.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "functions.go",
					"settings":
					{
						"buffer_size": 2411,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 931.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "picker.go",
					"settings":
					{
						"buffer_size": 4368,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 1374.0,
						"translation.y": 1022.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "console.go",
					"settings":
					{
						"buffer_size": 3887,
						"regions":
						{
						},
						"selection":
						[
							[
								2314,
								2349
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 966.0,
						"translation.y": 465.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "inventory.go",
					"settings":
					{
						"buffer_size": 24455,
						"regions":
						{
						},
						"selection":
						[
							[
								408,
								408
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 272.0,
						"translation.y": 5.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "pause.go",
					"settings":
					{
						"buffer_size": 1538,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "fonts.go",
					"settings":
					{
						"buffer_size": 2968,
						"regions":
						{
						},
						"selection":
						[
							[
								1823,
								1823
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 900.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "/home/iand/wip/productdb/trunk/makedump",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/iand/wip/gofirst/sdltest.go",
					"settings":
					{
						"buffer_size": 3655,
						"regions":
						{
						},
						"selection":
						[
							[
								3217,
								3217
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1831.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "README.md",
					"settings":
					{
						"buffer_size": 583,
						"regions":
						{
						},
						"selection":
						[
							[
								407,
								407
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "wolf.go",
					"settings":
					{
						"buffer_size": 8670,
						"regions":
						{
						},
						"selection":
						[
							[
								1042,
								1042
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 525.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "mob.go",
					"settings":
					{
						"buffer_size": 10661,
						"regions":
						{
						},
						"selection":
						[
							[
								5911,
								5911
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3346.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "world.go",
					"settings":
					{
						"buffer_size": 23424,
						"regions":
						{
						},
						"selection":
						[
							[
								8686,
								8686
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4815.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "world_test.go",
					"settings":
					{
						"buffer_size": 929,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 298.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/home/iand/wip/iandavis.com/iandavis.com.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": false,
	"side_bar_visible": true,
	"side_bar_width": 252.0,
	"status_bar_visible": true
}
